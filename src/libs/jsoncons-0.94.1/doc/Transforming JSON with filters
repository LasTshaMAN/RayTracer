<!DOCTYPE html>
<html>
<head>
<title>Transforming JSON with filters</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<p>Suppose you have a JSON address book that looks like this</p>
<pre><code>{
    &quot;address-book&quot; : 
    [
        {
            &quot;name&quot;:&quot;Jane Roe&quot;,
            &quot;email&quot;:&quot;jane.roe@example.com&quot;
        },
        {
             &quot;name&quot;:&quot;John&quot;,
             &quot;email&quot; : &quot;john.doe@example.com&quot;
         }
    ]
}
</code></pre>

<p><code>address-book.json</code></p>
<p>Now suppose you want to break the name into a first name and last name, and report a warning when <code>name</code> does not contain a space or tab separator. Pretend that the file <code>address-book.json</code> is too large to hold in memory.</p>
<p>You can achieve the desired result by subclassing the <a href="json_filter">json_filter</a> class, overriding the default methods for name and string value event notifications, and delegating modified event notifications to the parent <a href="json_input_handler">json<em>input</em>handler</a> (which in this example will forward them to a <a href="json_serializer">json_serializer</a>.) </p>
<pre><code>#include &quot;jsoncons/json_serializer.hpp&quot;
#include &quot;jsoncons/json_filter.hpp&quot;
#include &quot;jsoncons/json_reader.hpp&quot;

using jsoncons::parsing_context;
using jsoncons::json_serializer;
using jsoncons::json_reader;
using jsoncons::json_input_handler;
using jsoncons::json_output_handler;

class my_json_filter : public json_filter
{
public:
    my_json_filter(json_output_handler&amp; parent)
        : json_filter(parent)
    {
    }

    virtual void name(const std::string&amp; name, const parsing_context&amp; context)
    {
        name_ = name;
        if (name != &quot;name&quot;)
        {
            parent().name(name,context);
        }
    }

    virtual void string_value(const std::string&amp; value, const parsing_context&amp; context)
    {
        if (name_ == &quot;name&quot;)
        {
            size_t end_first = value.find_first_of(&quot; \t&quot;);
            size_t start_last = value.find_first_not_of(&quot; \t&quot;,end_first);
            parent().name(&quot;first-name&quot;,context);
            std::string first = value.substr(0,end_first);
            parent().value(first,context);
            if (start_last != std::string::npos)
            {
                parent().name(&quot;last-name&quot;,context);
                std::string last = value.substr(start_last);
                parent().value(last,context);
            }
            else
            {
                std::cerr &lt;&lt; &quot;Incomplete name \&quot;&quot; &lt;&lt; value
                          &lt;&lt; &quot;\&quot; at line &quot; &lt;&lt; context.line_number()
                          &lt;&lt; &quot; and column &quot; &lt;&lt; context.column_number() &lt;&lt; std::endl;
            }
        }
        else
        {
            parent().value(value,context);
        }
    }
private:
    std::string name_;
};
</code></pre>

<p>In your code you will pass <code>my_json_filter</code> to the constructor of <a href="json_reader">json_reader</a>, and call read</p>
<pre><code>std::string in_file = &quot;address-book.json&quot;;
std::string out_file = &quot;address-book-new.json&quot;;
std::ifstream is(in_file,std::ofstream::binary);
std::ofstream os(out_file);

json_serializer serializer(os, true);
my_json_filter filter(serializer);
json_reader reader(is,filter);
reader.read();
</code></pre>

<p>The output is a warning message written to the console</p>
<pre><code>Incomplete name &quot;John&quot; at line 9 and column 27
</code></pre>

<p>and an address book file with the required change</p>
<pre><code>{
    &quot;address-book&quot;:
    [
        {
            &quot;first-name&quot;:&quot;Jane&quot;,
            &quot;last-name&quot;:&quot;Roe&quot;,
            &quot;email&quot;:&quot;jane.roe@example.com&quot;
        },
        {
            &quot;first-name&quot;:&quot;John&quot;,
            &quot;email&quot;:&quot;john.doe@example.com&quot;
        }
    ]
}
</code></pre>

<p><code>address-book-new.json</code></p>

</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
