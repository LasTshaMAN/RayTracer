<!DOCTYPE html>
<html>
<head>
<title>Type Extensibility</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<p>If you want to use the json methods <code>is&lt;T&gt;</code>, <code>as&lt;T&gt;</code>, <code>add</code>, <code>set</code> and <code>operator=</code> to access or modify with a new type, you need to show json how to interact with that type, by extending <code>value_adapter</code> in the <code>jsoncons</code> namespace.</p>
<p>For example, by including the header file <code>jsoncons_ext/boost/type_extensions.hpp</code>, you can access and modify <code>json</code> values with <code>boost::gregorian</code> dates.</p>
<pre><code>#include &quot;jsoncons/json.hpp&quot;
#include &quot;jsoncons_ext/boost/type_extensions.hpp&quot;

namespace my
{
    using jsoncons::json;
    using boost::gregorian::date;

    json deal;
    deal[&quot;Maturity&quot;] = date(2014,10,14);

    json observation_dates(json::an_array);
    observation_dates.add(date(2014,2,14));
    observation_dates.add(date(2014,2,21));

    deal[&quot;ObservationDates&quot;] = std::move(observation_dates);

    date maturity = deal[&quot;Maturity&quot;].as&lt;date&gt;();
    std::cout &lt;&lt; &quot;Maturity: &quot; &lt;&lt; maturity &lt;&lt; std::endl &lt;&lt; std::endl;

    std::cout &lt;&lt; &quot;Observation dates: &quot; &lt;&lt; std::endl &lt;&lt; std::endl;
    json::array_iterator it = deal[&quot;ObservationDates&quot;].begin_elements();
    json::array_iterator end = deal[&quot;ObservationDates&quot;].end_elements();

    while (it != end)
    {
        date d = it-&gt;as&lt;date&gt;();
        std::cout &lt;&lt; d &lt;&lt; std::endl;
        ++it;
    }
    std::cout &lt;&lt; std::endl;

    std::cout &lt;&lt; pretty_print(deal) &lt;&lt; std::endl;
}
</code></pre>

<p>The output is</p>
<pre><code>Maturity: 2014-Oct-14

Observation dates:

2014-Feb-14
2014-Feb-21

{
    &quot;Maturity&quot;:&quot;2014-10-14&quot;,
    &quot;ObservationDates&quot;:
    [&quot;2014-02-14&quot;,&quot;2014-02-21&quot;]
}
</code></pre>

<p>You can look in the header file <code>jsoncons_ext/boost/type_extensions.hpp</code>
to see how the specialization of <code>value_adapter</code> that supports
the conversions works. In this implementation the <code>boost</code> date values are stored in the <code>json</code> values as strings.</p>
<pre><code>namespace jsoncons
{
    template &lt;typename Storage&gt;
    class value_adapter&lt;char,Storage,boost::gregorian::date&gt;
    {
    public:
        bool is(const basic_json&lt;char,Storage&gt;&amp; val) const
        {
            if (!val.is&lt;std::string&gt;())
            {
                return false;
            }
            std::string s = val.as&lt;std::string&gt;();
            try
            {
                boost::gregorian::date_from_iso_string(s);
                return true;
            }
            catch (...)
            {
                return false;
            }
        }
        boost::gregorian::date as(const basic_json&lt;char,Storage&gt;&amp; val) const
        {
            std::string s = val.as&lt;std::string&gt;();
            return boost::gregorian::from_simple_string(s);
        }
        void assign(basic_json&lt;char,Storage&gt;&amp; self, boost::gregorian::date val)
        {
            std::string s(to_iso_extended_string(val));
            self = s;
        }
    };
};
</code></pre>


</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
