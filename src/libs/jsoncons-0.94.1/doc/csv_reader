<!DOCTYPE html>
<html>
<head>
<title>csv_reader</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<style type="text/css">
/* GitHub stylesheet for MarkdownPad (http://markdownpad.com) */
/* Author: Nicolas Hery - http://nicolashery.com */
/* Version: b13fe65ca28d2e568c6ed5d7f06581183df8f2ff */
/* Source: https://github.com/nicolahery/markdownpad-github */

/* RESET
=============================================================================*/

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
}

/* BODY
=============================================================================*/

body {
  font-family: Helvetica, arial, freesans, clean, sans-serif;
  font-size: 14px;
  line-height: 1.6;
  color: #333;
  background-color: #fff;
  padding: 20px;
  max-width: 960px;
  margin: 0 auto;
}

body>*:first-child {
  margin-top: 0 !important;
}

body>*:last-child {
  margin-bottom: 0 !important;
}

/* BLOCKS
=============================================================================*/

p, blockquote, ul, ol, dl, table, pre {
  margin: 15px 0;
}

/* HEADERS
=============================================================================*/

h1, h2, h3, h4, h5, h6 {
  margin: 20px 0 10px;
  padding: 0;
  font-weight: bold;
  -webkit-font-smoothing: antialiased;
}

h1 tt, h1 code, h2 tt, h2 code, h3 tt, h3 code, h4 tt, h4 code, h5 tt, h5 code, h6 tt, h6 code {
  font-size: inherit;
}

h1 {
  font-size: 28px;
  color: #000;
}

h2 {
  font-size: 24px;
  border-bottom: 1px solid #ccc;
  color: #000;
}

h3 {
  font-size: 18px;
}

h4 {
  font-size: 16px;
}

h5 {
  font-size: 14px;
}

h6 {
  color: #777;
  font-size: 14px;
}

body>h2:first-child, body>h1:first-child, body>h1:first-child+h2, body>h3:first-child, body>h4:first-child, body>h5:first-child, body>h6:first-child {
  margin-top: 0;
  padding-top: 0;
}

a:first-child h1, a:first-child h2, a:first-child h3, a:first-child h4, a:first-child h5, a:first-child h6 {
  margin-top: 0;
  padding-top: 0;
}

h1+p, h2+p, h3+p, h4+p, h5+p, h6+p {
  margin-top: 10px;
}

/* LINKS
=============================================================================*/

a {
  color: #4183C4;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
}

/* LISTS
=============================================================================*/

ul, ol {
  padding-left: 30px;
}

ul li > :first-child, 
ol li > :first-child, 
ul li ul:first-of-type, 
ol li ol:first-of-type, 
ul li ol:first-of-type, 
ol li ul:first-of-type {
  margin-top: 0px;
}

ul ul, ul ol, ol ol, ol ul {
  margin-bottom: 0;
}

dl {
  padding: 0;
}

dl dt {
  font-size: 14px;
  font-weight: bold;
  font-style: italic;
  padding: 0;
  margin: 15px 0 5px;
}

dl dt:first-child {
  padding: 0;
}

dl dt>:first-child {
  margin-top: 0px;
}

dl dt>:last-child {
  margin-bottom: 0px;
}

dl dd {
  margin: 0 0 15px;
  padding: 0 15px;
}

dl dd>:first-child {
  margin-top: 0px;
}

dl dd>:last-child {
  margin-bottom: 0px;
}

/* CODE
=============================================================================*/

pre, code, tt {
  font-size: 12px;
  font-family: Consolas, "Liberation Mono", Courier, monospace;
}

code, tt {
  margin: 0 0px;
  padding: 0px 0px;
  white-space: nowrap;
  border: 1px solid #eaeaea;
  background-color: #f8f8f8;
  border-radius: 3px;
}

pre>code {
  margin: 0;
  padding: 0;
  white-space: pre;
  border: none;
  background: transparent;
}

pre {
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  font-size: 13px;
  line-height: 19px;
  overflow: auto;
  padding: 6px 10px;
  border-radius: 3px;
}

pre code, pre tt {
  background-color: transparent;
  border: none;
}

kbd {
    -moz-border-bottom-colors: none;
    -moz-border-left-colors: none;
    -moz-border-right-colors: none;
    -moz-border-top-colors: none;
    background-color: #DDDDDD;
    background-image: linear-gradient(#F1F1F1, #DDDDDD);
    background-repeat: repeat-x;
    border-color: #DDDDDD #CCCCCC #CCCCCC #DDDDDD;
    border-image: none;
    border-radius: 2px 2px 2px 2px;
    border-style: solid;
    border-width: 1px;
    font-family: "Helvetica Neue",Helvetica,Arial,sans-serif;
    line-height: 10px;
    padding: 1px 4px;
}

/* QUOTES
=============================================================================*/

blockquote {
  border-left: 4px solid #DDD;
  padding: 0 15px;
  color: #777;
}

blockquote>:first-child {
  margin-top: 0px;
}

blockquote>:last-child {
  margin-bottom: 0px;
}

/* HORIZONTAL RULES
=============================================================================*/

hr {
  clear: both;
  margin: 15px 0;
  height: 0px;
  overflow: hidden;
  border: none;
  background: transparent;
  border-bottom: 4px solid #ddd;
  padding: 0;
}

/* TABLES
=============================================================================*/

table th {
  font-weight: bold;
}

table th, table td {
  border: 1px solid #ccc;
  padding: 6px 13px;
}

table tr {
  border-top: 1px solid #ccc;
  background-color: #fff;
}

table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

/* IMAGES
=============================================================================*/

img {
  max-width: 100%
}
</style>
</head>
<body>
<pre><code>jsoncons_ext::csv::csv_reader
</code></pre>

<p>The <code>csv_reader</code> class is an instantiation of the <code>basic_csv_reader</code> class template that uses char as the character type. It reads a <a href="http://tools.ietf.org/html/rfc4180">CSV file</a> and produces JSON parse events.</p>
<h3>Header</h3>
<pre><code>#include &quot;jsoncons_ext/csv/csv_reader.hpp&quot;
</code></pre>

<h3>Constructors</h3>
<pre><code>csv_reader(std::istream&amp; is,
           json_input_handler&amp; handler)
</code></pre>

<p>Constructs a <code>csv_reader</code> that is associated with an input stream
<code>is</code> of CSV text and a <a href="json_input_handler">json<em>input</em>handler</a> handler that receives
notification of JSON events. Uses default [csv formatting parameters](csv formatting parameters).</p>
<pre><code>csv_reader(std::istream&amp; is,
           json_input_handler&amp; handler,
           const json&amp; params)
</code></pre>

<p>Constructs a <code>csv_reader</code> that is associated with an input stream
<code>is</code> of CSV text, a <a href="json_input_handler">json<em>input</em>handler</a> handler that receives
notification of JSON events, and [csv formatting parameters](csv formatting parameters).</p>
<pre><code>csv_reader(std::istream&amp; is,
           json_input_handler&amp; handler,
           error_handler&amp; err_handler)
</code></pre>

<p>Constructs a <code>csv_reader</code> that is associated with an input stream
<code>is</code> of CSV text, a <a href="json_input_handler">json<em>input</em>handler</a> handler that receives
notification of JSON events and the specified <a href="error_handler">error_handler</a>.
Uses default [csv formatting parameters](csv formatting parameters).</p>
<pre><code>csv_reader(std::istream&amp; is,
           json_input_handler&amp; handler,
           error_handler&amp; err_handler,
           const json&amp; params)
</code></pre>

<p>Constructs a <code>csv_reader</code> that is associated with an input stream
<code>is</code> of CSV text, a <a href="json_input_handler">json<em>input</em>handler</a> handler that receives
notification of JSON events, the specified <a href="error_handler">error_handler</a>,
and [csv formatting parameters](csv formatting parameters).</p>
<h3>Member functions</h3>
<pre><code>bool eof() const
</code></pre>

<p>Returns <code>true</code> when there is no more data to be read from the stream, <code>false</code> otherwise</p>
<pre><code>void read()
</code></pre>

<p>Reports JSON related events for JSON objects, arrays, object members and array elements to a <a href="json_input_handler">json<em>input</em>handler</a> handler, such as a <a href="json_deserializer">json_deserializer</a>.</p>
<pre><code>size_t buffer_capacity() const

void buffer_capacity(size_t buffer_capacity)
</code></pre>

<h3>Examples</h3>
<h3>Reading a comma delimted file into an array of json values</h3>
<h4>Comma delimited input file</h4>
<pre><code>country_code,name
ABW,ARUBA
ATF,&quot;FRENCH SOUTHERN TERRITORIES, D.R. OF&quot;
VUT,VANUATU
WLF,WALLIS &amp; FUTUNA ISLANDS
</code></pre>

<p>Note </p>
<ul>
<li>The first record contains a header line, but we're going to ignore that and read the entire file as an array of arrays.</li>
<li>The third record has a field value that contains an embedded comma, so it must be quoted.</li>
</ul>
<h4>Reading the comma delimited file with csv_reader</h4>
<pre><code>std::string in_file = &quot;countries.csv&quot;;
std::ifstream is(in_file);

json_deserializer handler;

csv_reader reader(is,handler);
reader.read();
json countries = std::move(handler.root());

std::cout &lt;&lt; countries &lt;&lt; std::endl;
</code></pre>

<h4>Output</h4>
<pre><code>[
    [&quot;country_code&quot;,&quot;name&quot;],
    [&quot;ABW&quot;,&quot;ARUBA&quot;],
    [&quot;ATF&quot;,&quot;FRENCH SOUTHERN TERRITORIES, D.R. OF&quot;],
    [&quot;VUT&quot;,&quot;VANUATU&quot;],
    [&quot;WLF&quot;,&quot;WALLIS &amp; FUTUNA ISLANDS&quot;]
]
</code></pre>

<h3>Reading a tab delimted file into an array of json objects</h3>
<h4>Tab delimited input file</h4>
<pre><code>employee-no employee-name   dept    salary  note
00000001    Smith, Matthew  sales   150,000.00  
00000002    Brown, Sarah    sales   89,000.00   
00000003    Oberc, Scott    finance 110,000.00  
00000004    Scott, Colette  sales   75,000.00   &quot;&quot;&quot;Exemplary&quot;&quot; employee
Dependable, trustworthy&quot;
</code></pre>

<p>Note </p>
<ul>
<li>The first record is a header line, which will be used to associate data values with names</li>
<li>The fifth record has a field value that contains embedded quotes and a new line character, so it must be quoted and the embedded quotes escaped.</li>
</ul>
<h4>Reading the tab delimited file with csv_reader</h4>
<pre><code>std::string in_file = &quot;employees.txt&quot;;
std::ifstream is(in_file);

json_deserializer handler;
json params;
params[&quot;field_delimiter&quot;] = &quot;\t&quot;;
params[&quot;has_header&quot;] = true;

csv_reader reader(is,handler,params);
reader.read();
json employees = std::move(handler.root());

std::cout &lt;&lt; employees &lt;&lt; std::endl;
</code></pre>

<h4>Output</h4>
<pre><code>[
    {
        &quot;dept&quot;:&quot;sales&quot;,
        &quot;employee-name&quot;:&quot;Smith, Matthew&quot;,
        &quot;employee-no&quot;:&quot;00000001&quot;,
        &quot;note&quot;:&quot;&quot;,
        &quot;salary&quot;:&quot;150,000.00&quot;
    },
    {
        &quot;dept&quot;:&quot;sales&quot;,
        &quot;employee-name&quot;:&quot;Brown, Sarah&quot;,
        &quot;employee-no&quot;:&quot;00000002&quot;,
        &quot;note&quot;:&quot;&quot;,
        &quot;salary&quot;:&quot;89,000.00&quot;
    },
    {
        &quot;dept&quot;:&quot;finance&quot;,
        &quot;employee-name&quot;:&quot;Oberc, Scott&quot;,
        &quot;employee-no&quot;:&quot;00000003&quot;,
        &quot;note&quot;:&quot;&quot;,
        &quot;salary&quot;:&quot;110,000.00&quot;
    },
    {
        &quot;dept&quot;:&quot;sales&quot;,
        &quot;employee-name&quot;:&quot;Scott, Colette&quot;,
        &quot;employee-no&quot;:&quot;00000004&quot;,
        &quot;note&quot;:&quot;\&quot;Exemplary\&quot; employee\nDependable, trustworthy&quot;,
        &quot;salary&quot;:&quot;75,000.00&quot;
    }
]
</code></pre>


</body>
</html>
<!-- This document was created with MarkdownPad, the Markdown editor for Windows (http://markdownpad.com) -->
